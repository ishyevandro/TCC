#include <iostream>
#include <string>
#include <boost/regex.h>
//#include "classe_var.cpp"

using namespace std;

class _reg{
public:
    regex_t *first;
    int num_reg;
    regmatch_t result;
    _reg();
    void reg_comp();
    int reg_exec(string, _var *,int &);
};

_reg::_reg(): first(NULL), num_reg(0){}

void _reg::reg_comp ()//verificar se sera assim mesmo
{

    if (this->num_reg == 0)
        first = new regex_t[10];
    if (regcomp (&first[num_reg], "\\$", REG_EXTENDED)!= 0){//Expressao regular... descobrir como fazer aqui
	    cout <<"Montagem da expressao com erro\n"<<endl;//arrumar essa porcaria pra ler do arquivos as expressoes
	    exit (-1);
	}
	num_reg++;
		if (regcomp (&first[num_reg], "[\\=\\-\\ \\+\\.\\;]", REG_EXTENDED)!= 0){//Expressao regular... descobrir como fazer aqui
	    cout <<"Montagem da expressao com erro segunda parte\n"<<endl;
	    exit (-1);
	}
	num_reg++;
}

int _reg::reg_exec(string line,_var *vetor_de_variaveis, int &vet_num){
    int var_teste=1;
    string subline, var;
    while (var_teste==1)
		{
		    if (regexec(first[0], linha.c_str(),(size_t)1,&result, 0)==0)
		    {
	
		        subline = line.substr((int)result.rm_so, line.length());//pegar a partir do ponto que ha uma variavel
		       if (regexec(first[1], subline.c_str(),(size_t)1, &result, 0)==0)//encontrar o final da variavel
		        {
		            var = subline.substr(0, (int)result.rm_so);//pegando variavel
		            if (!if_var_array(vetor_de_variaveis,cont_vetor, var)){
		               cont_vetor++;
		            }
		            linha = subline.substr((int)result.rm_so, sublinha.length());
		        }
		    }else{
		        var_teste =0;
		    }  
        }

}
