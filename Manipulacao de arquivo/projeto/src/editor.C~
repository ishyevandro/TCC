//           editor.C
//  Qui agosto 30 19:42:53 2012
//  Copyright  2012  Alcione Ferreira
//  <user@host>

#include <editor.h>

using namespace Gtk::Menu_Helpers;

EDITOR::EDITOR()
	{
	this->A = new _arq;
	this->titulo.clear();
	this->titulo = "Editor de Textos";
	this->caminho.clear();
	this->caminho = "Sem nome";
	modificado = false;
	this->conexao = new BANCOSL(DB_FILE);
	this->set_title (this->titulo+" - "+this->caminho);
	this->maximize ();
	this->signal_hide ().connect(sigc::mem_fun(*this,&EDITOR::sair));
	//this->signal_show ().connect (sigc::bind<int>(sigc::mem_fun(*this,&EDITOR::carregar_dados),1));
	this->Principal.set_homogeneous (false);
	this->Principal.set_spacing (0);
	H_Menu.set_homogeneous (false);
	H_Menu.set_spacing (0);
	Menu = Gtk::manage (new Gtk::MenuBar ());
		{
		Gtk::Menu::MenuList& menulist = SM_Recente.items();
		//...
		menulist.push_back (MenuElem(Glib::ustring("/home/alcione/C++/editor/ChangeLog1"),sigc::bind(sigc::mem_fun(*this,&EDITOR::testar),"/home/alcione/C++/editor/ChangeLog1")));/* chamar função para abrir arquivo*/
		}
		{
		Gtk::Menu::MenuList& menulist = Menu_Arquivo.items();
		//menulist.push_back (MenuElem(Glib::ustring("_Novo"),Gtk::AccelKey ("<control>n"),sigc::mem_fun(*this,&EDITOR::novo)));
		menulist.push_back (MenuElem(Glib::ustring("_Abrir"),Gtk::AccelKey ("<control>o"),sigc::mem_fun(*this,&EDITOR::abrir)));
		menulist.push_back (MenuElem(Glib::ustring("Abrir recentes..."),Gtk::AccelKey ("<control>r"),SM_Recente));
		//menulist.push_back (MenuElem(Glib::ustring("_Salvar"),Gtk::AccelKey ("<control>s"),sigc::bind<bool>(sigc::mem_fun(*this,&EDITOR::salvar),true)));
		//menulist.push_back (MenuElem(Glib::ustring("Sa_lvar como..."),Gtk::AccelKey ("<control><shift>s"),sigc::bind<bool>(sigc::mem_fun(*this,&EDITOR::salvar),false)));
		menulist.push_back (SeparatorElem());
		menulist.push_back (MenuElem(Glib::ustring("Sai_r"),Gtk::AccelKey ("<alt>F4"),sigc::mem_fun(*this,&EDITOR::sair)));
		}
	Menu->items().push_back(MenuElem(Glib::ustring("_Arquivo"),Gtk::AccelKey("<alt>a"),Menu_Arquivo));
	Menu->items().push_back(MenuElem(Glib::ustring("_Editar"),Gtk::AccelKey("<alt>e"),Menu_Editar));
	Menu->items().push_back(MenuElem(Glib::ustring("Aj_uda"),Gtk::AccelKey("<alt>u"),Menu_Ajuda));
	H_Menu.pack_start(*Menu,true,true,0);
	Principal.pack_start (H_Menu,false,false,0);
	H_ToolBar.set_homogeneous (false);
	H_ToolBar.set_spacing (0);
	TB_Novo.set_stock_id(Gtk::Stock::NEW);
	TB_Novo.set_tooltip_text ("Novo");
	//TB_Novo.signal_clicked ().connect (sigc::mem_fun(*this,&EDITOR::novo));
	ToolBar.append (TB_Novo);
	TB_Abrir.set_stock_id(Gtk::Stock::OPEN);
	TB_Abrir.set_tooltip_text ("Abrir");
	TB_Abrir.signal_clicked ().connect(sigc::mem_fun(*this,&EDITOR::abrir));
	ToolBar.append (TB_Abrir);
	
	
	TB_Verificar.set_stock_id(Gtk::Stock::OPEN);
	TB_Verificar.set_tooltip_text ("Verificar");
	TB_Verificar.signal_clicked ().connect(sigc::mem_fun(*this,&EDITOR::verifica));
	ToolBar.append (TB_Verificar);
	
	
	
	
	
	TB_Salvar.set_stock_id(Gtk::Stock::SAVE);
	TB_Salvar.set_tooltip_text ("Salvar");
	TB_Salvar.set_sensitive (false);
	//TB_Salvar.signal_clicked ().connect(sigc::bind<bool>(sigc::mem_fun(*this,&EDITOR::salvar),true));
	ToolBar.append (TB_Salvar);
	ToolBar.append (TB_Separador);
	TB_Pesquisar.set_stock_id(Gtk::Stock::FIND);
	TB_Pesquisar.set_tooltip_text ("Procurar");
	ToolBar.append (TB_Pesquisar);
	TB_Aplicar.set_stock_id(Gtk::Stock::APPLY);
	TB_Aplicar.set_tooltip_text ("Aplicar");
	//TB_Aplicar.signal_clicked ().connect(sigc::mem_fun(*this,&EDITOR::aplicar)); GTK_STOCK_DIALOG_WARNING
	ToolBar.append (TB_Aplicar);
	TB_Imprimir.set_stock_id (Gtk::Stock::PRINT);
	TB_Imprimir.set_tooltip_text ("Imprimir");
	ToolBar.append (TB_Imprimir);
	H_ToolBar.pack_start(ToolBar,true,true,0);
	Principal.pack_start (H_ToolBar,false,false,0);
	this->H_Conteudo = new Gtk::HBox(false,0);
	SProcess.set_policy(Gtk::POLICY_NEVER, Gtk::POLICY_AUTOMATIC);
	SLog.set_policy(Gtk::POLICY_NEVER, Gtk::POLICY_AUTOMATIC);
	SProcess.add(TProcess);
	SLog.add(TLog);
	PProcess = TProcess.get_buffer();
	PProcess->set_text("");
	PLog = TLog.get_buffer();
	PLog->set_text("");
	tag = PProcess->create_tag("geral");
	tag->property_font() = "Arial 19";
	tag->property_wrap_mode () = Gtk::WRAP_WORD;
	tag->property_left_margin() = 10;
	tag->property_right_margin() = 10;
	TProcess.set_buffer(PProcess);
	TLog.set_buffer(PLog);
	//PTexto->get_bounds(inicio, final);
	//PTexto->apply_tag_by_name("geral", inicio, final);
	//PTexto->signal_changed ().connect(sigc::mem_fun(*this,&EDITOR::foi_modificado));
	Abas.set_border_width(10);
	Abas.append_page (SProcess,"Processamento");
	Abas.append_page (SLog,"Debugger");
	H_Conteudo->pack_start (Abas,true,true,0);
	this->Principal.pack_start (*this->H_Conteudo,true,true,0);
	statusbar = BarraStatus.push(Glib::ustring("Editor de Texto Simples"));
	Principal.pack_end(BarraStatus,false,true,0);
	this->add(this->Principal);
	Glib::signal_timeout().connect(sigc::mem_fun(*this,&EDITOR::relogio), 1000);
	this->show_all();
	}

EDITOR::~EDITOR()
	{
	if (this->conexao->conectado)
		{
		delete this->conexao;
		}
	this->hide();
	}

/*void EDITOR::carregar_dados(int dados)
	{
	string SQL, AUX;
	char *sql, *aux;
	vector<vector<string> >::iterator i;
	vector<string> linha;

	switch(dados)
		{
		case 1:
			{
			SQL.clear();
			SQL = "select estado from municipio group by estado order by estado";
			sql = new char[SQL.length()+1];
			strcpy(sql,SQL.c_str());
			this->conexao->executar(sql,2);
			if (this->conexao->query_result != 3)
				{
				this->Estado.clear();
				for (i = this->conexao->resultados.begin(); i < this->conexao->resultados.end(); i++)
					{
					linha = *i;
					AUX.clear();
					AUX = linha.at(0);
					this->Estado.append_text (Glib::ustring(AUX));
					}
				}
			else
				{
				this->Resposta.set_text(this->conexao->mensagem);
				}
					
			break;
			}
		case 2:
			{
			AUX.clear();
			AUX = this->Estado.get_active_text ();
			SQL.clear();
			SQL = "select nome from municipio where estado='"+AUX+"' order by nome";
			sql = new char[SQL.length()+1];
			strcpy(sql,SQL.c_str());
			this->conexao->executar(sql,2);
			if (this->conexao->query_result != 3)
				{
				this->Cidade.clear();
				for (i = this->conexao->resultados.begin(); i < this->conexao->resultados.end(); i++)
					{
					linha = *i;
					AUX.clear();
					AUX = linha.at(0);
					this->Cidade.append_text (Glib::ustring(AUX));
					}
				}
			else
				{
				this->Resposta.set_text(this->conexao->mensagem);
				}		
			break;
			}
		}
	}*/

void EDITOR::testar (string teste)
	{
	cout << teste << endl;
	}

bool EDITOR::relogio()
	{
	string status;
	status.clear();
	status = "Editor de Texto Simples ";
	status.append(agora());
	this->statusbar = this->BarraStatus.push(Glib::ustring(status));
	return true;
	}

/*void EDITOR::aplicar()
	{
	PTexto = TTexto.get_buffer();
	PTexto->get_bounds(inicio, final);
	PTexto->apply_tag_by_name("geral", inicio, final);
	TTexto.set_buffer (PTexto);
	}*/

void EDITOR::abrir()
	{
	ifstream arquivo;
	string texto, aux, clas_arq;
	int resultado;
	
	Gtk::FileChooserDialog dialog("Abrir arquivo...",Gtk::FILE_CHOOSER_ACTION_OPEN);
  	dialog.set_transient_for(*this);
	dialog.add_button(Gtk::Stock::CANCEL, Gtk::RESPONSE_CANCEL);
  	dialog.add_button(Gtk::Stock::OPEN, Gtk::RESPONSE_OK);
	Gtk::FileFilter filtro;
	filtro.set_name("Text files");
	filtro.add_mime_type("text/plain");
	dialog.add_filter(filtro);
	resultado = dialog.run();
	switch(resultado)
		{
		case Gtk::RESPONSE_OK:
			{
			caminho.clear();
			caminho = dialog.get_filename ();
			cout << caminho << endl;
			arquivo.open(caminho.c_str());
			texto.clear();
			while (arquivo.good())
				{
				aux.clear();
				getline(arquivo,aux,'\n');
				texto += aux + "\n";
				}
			arquivo.close();
			PProcess = TProcess.get_buffer();
			PProcess->get_bounds(inicio, final);
			iter = PProcess->erase(inicio,final);
			PProcess->insert(iter,Glib::ustring(texto));
			TProcess.set_buffer (PProcess);
			Panalise = TProcess.get_buffer();
			cout << Panalise->get_text() << endl;
			
			//aplicar();
			modificado = false;
			TB_Salvar.set_sensitive (false);
			break;
			}
		case Gtk::RESPONSE_CANCEL:
			{
			break;
			}
		default:
			{
			break;
			}
		}
	set_title(this->titulo +" - "+caminho);
	}

/*void EDITOR::salvar (bool modo)
	{
	ofstream salva;
	string aux;
	int resultado;
	if (modo)
		{
		if (caminho.compare("Sem nome") == 0)
			{
			salvar(false);
			}
		else
			{
			salva.open(caminho.c_str());
			aux.clear();
			PTexto = TTexto.get_buffer ();
			aux = PTexto->get_text();
			salva << aux;
			salva.close();
			modificado = false;
			TB_Salvar.set_sensitive (false);
			set_title(titulo);
			}
		}
	else
		{
		Gtk::FileChooserDialog dialog("Salvar arquivo...",Gtk::FILE_CHOOSER_ACTION_SAVE);
	  	dialog.set_transient_for(*this);
		dialog.add_button(Gtk::Stock::CANCEL, Gtk::RESPONSE_CANCEL);
	  	dialog.add_button(Gtk::Stock::OPEN, Gtk::RESPONSE_OK);
		dialog.set_current_name (this->caminho);
		resultado = dialog.run();
		switch(resultado)
			{
			case Gtk::RESPONSE_OK:
				{
				this->caminho.clear();
				this->caminho = dialog.get_filename ();
				salvar(true);
				break;
				}
			default:
				{
				break;
				}
			}
		}
	set_title(titulo+" - "+caminho);
	}

void EDITOR::foi_modificado()
	{
	Glib::ustring aux;
	if (!modificado)
		{
		TB_Salvar.set_sensitive (true);
		modificado = true;
		aux = this->titulo + " - "+this->caminho+"*";
		cout << aux << endl;
		set_title(aux);
		}
	aplicar ();
	}*/

void EDITOR::sair()
	{
	/*int resposta;
	Gtk::Dialog *pergunta;
	if (this->modificado)
		{
		pergunta = new Gtk::Dialog("Salvar?",this);
		pergunta->add_button("Sim",GTK_RESPONSE_YES);
		pergunta->add_button(Glib::ustring("Não"),GTK_RESPONSE_NO);
		resposta = pergunta->run();
		switch(resposta)
			{
			case GTK_RESPONSE_YES:
				{
				this->salvar(true);
				break;
				}
			case GTK_RESPONSE_NO:
				{
				break;
				}
			default:
				{
				break;
				}
			}
		pergunta->hide();
		this->modificado = false;
		}*/
	this->hide();
	}

/*void EDITOR::novo()
	{
	int resposta;
	Gtk::Dialog *pergunta;
	if (this->modificado)
		{
		pergunta = new Gtk::Dialog("Salvar?",this);
		pergunta->add_button("Sim",GTK_RESPONSE_YES);
		pergunta->add_button(Glib::ustring("Não"),GTK_RESPONSE_NO);
		resposta = pergunta->run();
		switch(resposta)
			{
			case GTK_RESPONSE_YES:
				{
				this->salvar(true);
				break;
				}
			case GTK_RESPONSE_NO:
				{
				break;
				}
			default:
				{
				break;
				}
			}
		pergunta->hide();
		}
	this->PTexto = this->TTexto.get_buffer ();
	this->PTexto->get_bounds(this->inicio, this->final);
	this->iter = this->PTexto->erase(this->inicio,this->final);
	this->TTexto.set_buffer (this->PTexto);
	this->modificado = false;
	this->caminho.clear();
	this->caminho = "Sem nome";
	this->aplicar();
	this->set_title(this->titulo +" - "+this->caminho);
	}*/
	
  void	EDITOR::verifica (){
    Panalise = TProcess.get_buffer();
		cout << Panalise->get_text() << endl;
  
  } 
